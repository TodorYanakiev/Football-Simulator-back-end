plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
	id "org.sonarqube" version "5.1.0.4882"
}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
	toolVersion = "0.8.11"
	reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	classDirectories.setFrom(
			files(classDirectories.files.collect { fileTree(dir: it, exclude: [
					'com/example/FootballManager_back_end/DTO/**',
					'com/example/FootballManager_back_end/Entity/**',
					'com/example/FootballManager_back_end/Enum/**',
					'com/example/FootballManager_back_end/Repository/**'
			]) })
	)
}

tasks.check.dependsOn jacocoTestCoverageVerification
sonar {
	properties {
		property "sonar.projectKey", "TodorYanakiev_Football-Simulator-back-end"
		property "sonar.organization", "todoryanakiev"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.tests', 'src/test'
		//property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.coverage.exclusions", "Entity/**, DTO/**, Repository/**, Enum/**"
	}
}
group = 'com.example'
version = '0.0.1-SNAPSHOT'
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(22)
	}
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}
repositories {
	mavenCentral()
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.modelmapper:modelmapper:3.1.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}
tasks.named('test') {
	useJUnitPlatform()
}